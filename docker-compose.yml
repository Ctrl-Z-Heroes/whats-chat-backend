version: '3.5'
services:
  jaeger:
    networks:
      - backend
    image: jaegertracing/all-in-one:latest
    volumes:
      - './docker/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json'
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - LOG_LEVEL=info
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
    ports:
      - '16686:16686'
      - '14250:14250' #Artillery

  # Artillery stress tester
  artillery:
    image: artilleryio/artillery:latest
    volumes:
      - ./docker/artillery:/scripts
    command: ['run', '/scripts/test.yml']
    depends_on:
      - node
    networks:
      - backend

  # Collector
  otel_collector:
    networks:
      - backend
    image: otel/opentelemetry-collector-contrib:0.80.0
    volumes:
      - './docker/otel-collector/otel-collector-config-connector.yml:/etc/otelcol/otel-collector-config.yml'
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - '4317:4317'
      - '4318:4318'
      - '8888:8888'
      - '8889:8889'
    depends_on:
      - jaeger
    # microsim:
    #   networks:
    #     - backend
    #   image: yurishkuro/microsim:0.2.0
    #   command: '-j http://otel_collector:14278/api/traces -d 24h -s 500ms'
    #   depends_on:
    #     - otel-collector

  prometheus:
    container_name: prometheus
    networks:
      - backend
    image: prom/prometheus:latest
    volumes:
      - './docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'

  grafana:
    networks:
      - backend
    image: grafana/grafana:latest
    volumes:
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./docker/prometheus/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - 3000:3000
  node:
    build: . # Build the image using the Dockerfile in the current directory
    container_name: socketserver
    ports:
      - '8081:8081' # Map port 8081 in the container to port 80 on the host
    volumes:
      - .:/app # Mount the current directory to the /app directory in the container
    networks:
      - backend
    depends_on:
      - otel_collector

networks:
  backend:
